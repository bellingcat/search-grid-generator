<template>
    <v-app>
        <v-container>
            <v-responsive class="align-center text-center overflow-visible">
                <Header />
                <v-card
                    class="mx-auto mb-2"
                    max-width="600"
                    max-height="350"
                    @ready="readyMap()"
                >
                    <!-- Add a small input field with arrow icon for lat long-->
                    <v-text-field
                        hide-details="true"
                        label="Jump to coordinate (lat, lon)"
                        placeholder="48.86, 2.34"
                        v-model="mapCenter"
                        :append-inner-icon="'mdi-target'"
                        type="text"
                        density="compact"
                        @click:append-inner="jumpToCoordinate()"
                        @keydown.enter="jumpToCoordinate()"
                    ></v-text-field>
                </v-card>
                <LeafletMap
                    ref="leafletMap"
                    @onAreaSelect="onAreaSelect"
                    :gridSize="gridSize"
                />
                <!-- <v-card id="map" class="map mx-auto mb-2" height="400"  max-width="600"></v-card> -->
                <v-card class="mx-auto" max-width="600">
                    <v-card-text>
                        <v-form v-model="isFormValid">
                            <v-row class="px-3 pb-5 pt-1">
                                <v-text-field
                                    class="pr-1"
                                    v-model="coordinates1"
                                    label="Coordinate 1 (lat, lon)"
                                    placeholder="48.90529373066811, 2.2584719879516464"
                                    outlined
                                    :rules="[(v) => !!v]"
                                    density="compact"
                                    hide-details="true"
                                ></v-text-field>
                                <v-text-field
                                    class="pl-1"
                                    v-model="coordinates2"
                                    label="Coordinate 2 (lat, lon)"
                                    placeholder="48.81418021233939, 2.4172392962309246"
                                    outlined
                                    :rules="[(v) => !!v]"
                                    density="compact"
                                    hide-details="true"
                                ></v-text-field>
                            </v-row>
                            <v-text-field
                                v-model.number="gridSize"
                                label="Grid Size (km)"
                                placeholder="1"
                                outlined
                                type="number"
                                step="0.1"
                                :rules="[
                                    (v) =>
                                        v > 0 ||
                                        'Grid size must be greater than 0',
                                ]"
                                density="compact"
                            ></v-text-field>
                            <v-text-field
                                v-model="fileName"
                                label="File Name"
                                placeholder="grid.kml"
                                outlined
                                density="compact"
                                hide-details="true"
                            ></v-text-field>
                        </v-form>
                    </v-card-text>
                    <v-card-actions>
                        <v-btn
                            variant="elevated"
                            color="primary"
                            @click="downloadKML"
                            >Download Search Grid</v-btn
                        >
                    </v-card-actions>
                </v-card>
            </v-responsive>
        </v-container>
    </v-app>
</template>

<script>
import Header from './Header.vue';
import LeafletMap from './LeafletMap';
import { createKML } from '../lib/utils.js_OLD';
import Header from './Header.vue';

export default {
    components: {
        LeafletMap,
    },
    data() {
        return {
            isFormValid: true,
            lat1: null,
            lon1: null,
            lat2: null,
            lon2: null,
            gridSize: 1,
            fileName: 'grid.kml',
            areaSelect: null,
            mapCenter: null,
            map: null,
        };
    },
    computed: {
        coordinates1: {
            get() {
                if (!this.lat1 || !this.lon1) {
                    return;
                }
                return `${this.lat1}, ${this.lon1}`;
            },
            set(value) {
                const [lat, lon] = value.split(',').map(Number);
                this.lat1 = lat;
                this.lon1 = lon;
                this.$refs.leafletMap.onManualCoordsChange(
                    this.lat2,
                    this.lon2,
                    this.lat1,
                    this.lon1,
                );
            },
        },
        coordinates2: {
            get() {
                if (!this.lat2 || !this.lon2) {
                    return;
                }
                return `${this.lat2}, ${this.lon2}`;
            },
            set(value) {
                const [lat, lon] = value.split(',').map(Number);
                this.lat2 = lat;
                this.lon2 = lon;
                this.$refs.leafletMap.onManualCoordsChange(
                    this.lat2,
                    this.lon2,
                    this.lat1,
                    this.lon1,
                );
            },
        },
    },
    methods: {
        onAreaSelect(bounds) {
            if (!bounds) {
                this.lat1 = null;
                this.lon1 = null;
                this.lat2 = null;
                this.lon2 = null;
            } else {
                this.lat1 = bounds.getNorthEast().lat.toFixed(5);
                this.lon1 = bounds.getNorthEast().lng.toFixed(5);
                this.lat2 = bounds.getSouthWest().lat.toFixed(5);
                this.lon2 = bounds.getSouthWest().lng.toFixed(5);
            }
        },
        downloadKML() {
            // get gridgeojson
            const gridGeoJson = this.$refs.leafletMap.gridGeoJson;
            // convert to kml
            // const style = {
            //   color: '#ffffff',
            //   weight: 1,
            //   opacity: 1,
            //   fillColor: '#ff0000', // square bg
            //   fillOpacity: 0.2 // square opacity
            // };
            const kml = createKML(gridGeoJson.toGeoJSON());

            // Create a Blob with the KML data
            const blob = new Blob([kml], {
                type: 'application/vnd.google-earth.kml+xml',
            });
            const url = URL.createObjectURL(blob);

            // Create a temporary link to trigger the download
            const a = document.createElement('a');
            a.href = url;
            a.download = 'grid.kml';
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);

            // Revoke the object URL
            URL.revokeObjectURL(url);
        },
        previewGrid() {
            const kml = this.generateKML();
            return kml;
            // this.$refs.leafletMap.previewGrid(kml);
        },
        jumpToCoordinate() {
            if (!this.mapCenter) {
                return;
            }
            const [lat, lon] = this.mapCenter.split(',').map(Number);
            this.$refs.leafletMap.jumpToCoordinate(lat, lon);
        },
    },
};
</script>
